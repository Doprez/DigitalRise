<?xml version="1.0" encoding="utf-8"?>
<topic id="95a33167-7650-4006-8cf1-3e011c42bf54" revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

        <introduction>
            <para>
                This section explains how to create a <legacyItalic>start value effector</legacyItalic> (an effector that initializes
                particle parameters for newly created particles).
            </para>
        </introduction>


        <section>
            <title>What is an start value effector?</title>
            <content>
                <para>
                    Most particle systems have varying particle parameters. These are values (such as
                    "Position", "Size", etc.) that are stored per particle. When new particles are created,
                    someone must initialize the values of varying parameters. This is the job of the
                    <legacyItalic>start value effector</legacyItalic>.
                </para>
                <para>
                    The other type of particle parameters are uniform parameters. Uniform parameters are
                    shared by the particle system and all particles. They are usually initialized when the
                    particle system is created or reset. Start value effectors can also be used to initialize
                    uniform parameters, but in most cases it is easier to set them directly.
                </para>
                <para>
                    Start value effectors are derived from
                    <codeEntityReference qualifyHint="false">T:DigitalRise.Particles.ParticleEffector</codeEntityReference>.
                    Whenever new particles are emitted, a start value effector sets the initial values
                    of one or more varying particle parameters. This article shows how to implement a
                    start value effector that initializes a single configurable particle parameter.
                    (Please note: DigitalRise Particles contains a
                    <codeEntityReference qualifyHint="false">T:DigitalRise.Particles.Effectors.StartValueEffector`1</codeEntityReference>
                    that provides the same functionality.)
                </para>
            </content>
        </section>


        <section>
            <title>Creating a start value effector</title>
            <content>
                <para>
                    First, we create a new class that inherits from
                    <codeEntityReference qualifyHint="false">T:DigitalRise.Particles.ParticleEffector</codeEntityReference>.
                    Particle effectors can be added to a particle system, and they are
                    called whenever the particle system is initialized or updated.
                    Here is the empty class and the namespaces that we will need:
                </para>
                <code language="c#">
                    <![CDATA[
using DigitalRise.Mathematics.Statistics;
using DigitalRise.Particles;

namespace MyNamespace
{
  public class MyStartValueEffector<T> : ParticleEffector
  {
    // TODO: Add code.
  }
}
]]>
                </code>
                <para>
                    The class is a generic where the type parameter <legacyItalic>T</legacyItalic>
                    is the type of the particle parameter. Particle parameters are identified by
                    their name - a string that must be unique within a particle system. Let's add
                    a property to the particle effector that lets the user set the particle parameter
                    that should be initialized:
                </para>
                <code language="c#">
                    <![CDATA[
[ParticleParameter(ParticleParameterUsage.Out)]
public string Parameter { get; set; }
]]>
                </code>
                <para>
                    The
                    <codeEntityReference qualifyHint="false">T:DigitalRise.Particles.ParticleParameterAttribute</codeEntityReference>
                    provides meta-information for particle editors and validation.
                </para>
                <para>
                    How do we determine the start values for new particles? Usually each particle
                    should get a random value (e.g. a random position in sphere, a random color,
                    a random mass, etc.). <link xlink:href="2ac58586-0d4f-4625-bf4c-fc32591a5304">DigitalRise Mathematics</link>
                    provides random value distributions (see class
                    <codeEntityReference qualifyHint="false">T:DigitalRise.Mathematics.Statistics.Distribution`1</codeEntityReference>
                    and derived types). A <codeEntityReference qualifyHint="false">T:DigitalRise.Mathematics.Statistics.Distribution`1</codeEntityReference>
                    returns random values within a defined range that follow a certain probability
                    distribution.
                </para>
                <para>
                    Let's add a property to allow the user to set the
                    <codeEntityReference qualifyHint="false">T:DigitalRise.Mathematics.Statistics.Distribution`1</codeEntityReference>
                    that should be used. As a fallback, in case the user does not want to use random values,
                    let's also add a property "DefaultValue". This value will be applied to all particles if
                    no random value distribution is specified.
                </para>
                <code language="c#">
                    <![CDATA[
public Distribution<T> Distribution { get; set; }
    
public T DefaultValue { get; set; }
]]>
                </code>
                <para>
                    Particle effectors should be cloneable. The following two methods must be
                    overridden to support cloning:
                    <codeEntityReference qualifyHint="false">M:DigitalRise.Particles.ParticleEffector.CreateInstanceCore</codeEntityReference>
                    must return a new instance of the particle emitter and
                    <codeEntityReference qualifyHint="false">M:DigitalRise.Particles.ParticleEffector.CloneCore(DigitalRise.Particles.ParticleEffector)</codeEntityReference>
                    must copy all important properties:
                </para>
                <code language="c#">
                    <![CDATA[
protected override ParticleEffector CreateInstanceCore()
{
  return new MyStartValueEffector<T>();
}

protected override void CloneCore(ParticleEffector source)
{
  base.CloneCore(source);

  var sourceTyped = (MyStartValueEffector<T>)source;
  Parameter = sourceTyped.Parameter;
  Distribution = sourceTyped.Distribution;
  DefaultValue = sourceTyped.DefaultValue;
}
]]>
                </code>
                <para>
                    The base class <codeEntityReference qualifyHint="false">T:DigitalRise.Particles.ParticleEffector</codeEntityReference>
                    provides several virtual methods that can be overridden in derived classes.
                    These methods will be automatically called by the particle system to which
                    the effector is added. In
                    <codeEntityReference qualifyHint="false">M:DigitalRise.Particles.ParticleEffector.OnRequeryParameters</codeEntityReference>
                    the particle effector can query the required particle parameters and cache
                    the references. This method is called before the particle system is updated
                    the first time, and then every time the particle parameters change and need
                    to be requeried:
                </para>
                <code language="c#">
                    <![CDATA[
private IParticleParameter<T> _parameter;

protected override void OnRequeryParameters()
{
  _parameter = ParticleSystem.Parameters.Get<T>(Parameter);      
}
]]>
                </code>
                <para>
                    <codeEntityReference qualifyHint="false">M:DigitalRise.Particles.ParticleEffector.OnInitialize</codeEntityReference>
                    is called after
                    <codeEntityReference qualifyHint="false">M:DigitalRise.Particles.ParticleEffector.OnRequeryParameters</codeEntityReference>
                    when the particle system is updated for the first time, and whenever
                    the particle system is reset. In this method the internal state of the particle
                    effector should be reset and uniform particle parameters should be set to
                    their start values.
                </para>
                <code language="c#">
                    <![CDATA[
protected override void OnInitialize()
{
  if (_parameter != null && _parameter.IsUniform)
  {
    // Initialize uniform parameter.
    var distribution = Distribution;
    if (distribution != null)
      _parameter.DefaultValue = distribution.Next(ParticleSystem.Random);
    else
      _parameter.DefaultValue = DefaultValue;
  }
}
]]>
                </code>
                <para>
                    <codeEntityReference qualifyHint="false">M:DigitalRise.Particles.ParticleEffector.OnUninitialize</codeEntityReference>
                    is called when an effector is removed from a particle system. In this method
                    all resources and references to external objects should be released.
                </para>
                <code language="c#">
                    <![CDATA[
protected override void OnUninitialize()
{
  _parameter = null;
}
]]>
                </code>
                <para>
                    The base class
                    <codeEntityReference qualifyHint="false">T:DigitalRise.Particles.ParticleEffector</codeEntityReference>
                    also provides a virtual method that is called whenever new particles were
                    added to the system: <codeEntityReference qualifyHint="false">M:DigitalRise.Particles.ParticleEffector.OnInitializeParticles(System.Int32,System.Int32,System.Object)</codeEntityReference>.
                    In this method the start values of varying particle parameters should be set.
                </para>
                <code language="c#">
                    <![CDATA[
protected override void OnInitializeParticles(int startIndex, int count, object emitter)
{
  if (_parameter == null)
    return;

  T[] values = _parameter.Values;
  if (values == null)
  {
    // Parameter is uniform. Uniform parameters are handled in OnInitialize().
    return;
  }

  // Parameter is a varying parameter.
  var distribution = Distribution;
  if (distribution != null)
  {
    var random = ParticleSystem.Random;
    for (int i = startIndex; i < startIndex + count; i++)
      values[i] = distribution.Next(random);
  }
  else
  {
    var startValue = DefaultValue;
    for (int i = startIndex; i < startIndex + count; i++)
      values[i] = startValue;
  }
}
]]>
                </code>
                <para>
                    The code above is all that is needed for a start value effector. It is important to note
                    that the effector can be used to initialize both, uniform and varying, particle parameters.
                    Uniform particle parameters are initialized in
                    <codeEntityReference qualifyHint="false">M:DigitalRise.Particles.ParticleEffector.OnInitialize</codeEntityReference>
                    whenever the particle system is reset. Varying particle parameters are
                    initialized in
                    <codeEntityReference qualifyHint="false">M:DigitalRise.Particles.ParticleEffector.OnInitializeParticles(System.Int32,System.Int32,System.Object)</codeEntityReference>
                    whenever new particles are created.
                </para>
            </content>
        </section>


        <section>
            <title>The final start value effector code</title>
            <content>
                <para>
                    Here is the full source code of the start value effector.
                </para>
                <code language="c#">
                    <![CDATA[
using DigitalRise.Mathematics.Statistics;
using DigitalRise.Particles;


namespace MyNamespace
{
  public class MyStartValueEffector<T> : ParticleEffector
  {
    private IParticleParameter<T> _parameter;


    [ParticleParameter(ParticleParameterUsage.Out)]
    public string Parameter { get; set; }

    public Distribution<T> Distribution { get; set; }
    
    public T DefaultValue { get; set; }


    protected override ParticleEffector CreateInstanceCore()
    {
      return new MyStartValueEffector<T>();
    }

    protected override void CloneCore(ParticleEffector source)
    {
      base.CloneCore(source);

      var sourceTyped = (MyStartValueEffector<T>)source;
      Parameter = sourceTyped.Parameter;
      Distribution = sourceTyped.Distribution;
      DefaultValue = sourceTyped.DefaultValue;
    }

    protected override void OnRequeryParameters()
    {
      _parameter = ParticleSystem.Parameters.Get<T>(Parameter);
    }

    protected override void OnInitialize()
    {
      if (_parameter != null && _parameter.Values == null)
      {
        // Initialize uniform parameter.
        var distribution = Distribution;
        if (distribution != null)
          _parameter.DefaultValue = distribution.Next(ParticleSystem.Random);
        else
          _parameter.DefaultValue = DefaultValue;
      }
    }

    protected override void OnUninitialize()
    {
      _parameter = null;
    }
    
    protected override void OnInitializeParticles(int startIndex, int count, object emitter)
    {
      if (_parameter == null)
        return;

      T[] values = _parameter.Values;
      if (values == null)
      {
        // Parameter is a uniform. Uniform parameters are handled in OnInitialize().
        return;
      }

      // Parameter is a varying parameter.
      var distribution = Distribution;
      if (distribution != null)
      {
        var random = ParticleSystem.Random;
        for (int i = startIndex; i < startIndex + count; i++)
          values[i] = distribution.Next(random);
      }
      else
      {
        var startValue = DefaultValue;
        for (int i = startIndex; i < startIndex + count; i++)
          values[i] = startValue;
      }
    }
  }
}
]]>
                </code>
            </content>
        </section>


        <relatedTopics>
        </relatedTopics>

    </developerConceptualDocument>
</topic>
